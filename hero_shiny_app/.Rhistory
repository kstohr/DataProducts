relevel(InsectSprays$spray, "C")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray, data=InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[3]-fit$coef[3]/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year)
fit<-lm(Numeric~Year, data=hunger)
summary(fit)$coef
lmF<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], data=hunger)
lmM<-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"], data=hunger)
lmBoth<-lm(Numeric~Year+Sex, data=hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year, data=hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
skip()
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
attatch(mtcars)
attach(mtcars)
pairs(mpg ~.)
pairs(mpg ~., data=mtcars)
fit<-lm(mpg ~., data=mtcars)
plot(fit)
plot(fit)
plot(mpg ~ am, data=mtcars)
library(ggplot2)
pairs(USJudgeRatings, text.panel = NULL, upper.panel = NULL)
pairs(USJudgeRatings, upper.panel = NULL)
g<-ggplot(mtcars, aes(mpg~am))
g
g<-ggplot(mtcars, aes(mpg~am))+geom_boxplot()
g
g<-ggplot(mtcars, aes(mpg~am))+geom_boxplot()+facet_grid(.~am)
g
sapply(mtcars, class)
dim(mtcars)
head(mtcars)
mtcars<-as.data.frame(mtcars)
sapply(mtcars,class)
library(dplyr)
data<-as_data_frame(mtcars)
sapply(data,class)
summary(mtcars)
str(mtcars)
test<-as.factor(mtcars)
test<-as.factor(list(mtcars))
test<-apply(mtcars, as.factor)
test<-apply(mtcars, as.factor(list(mtcars)))
?mtcars
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c("Automatic", "Manual"))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("V-engine", "Straight-engine")
mtcars$gear <- factor(mtcars$gear)mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c("Automatic", "Manual"))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("V-engine", "Straight-engine")
mtcars$gear <- factor(mtcars$gear)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c("Automatic", "Manual"))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("V-engine", "Straight-engine")
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c("Automatic", "Manual"))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("V-engine", "Straight-engine")
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c("Automatic", "Manual"))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("V-engine", "Straight-engine")
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c("Automatic", "Manual"))
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, levels=c(0,1), labels=c("V-engine", "Straight-engine")
)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
str(mtcars)
pairs(mpg ~., data=mtcars)
pairs(mpg ~., data=as.numeric(mtcars)
)
pairs(mpg ~., data=mtcars)
pairs(mtcars)
pairs(as.numeric(mtcars))
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
rm(list=ls())
head(mtcars)
str(mtcars)
pairs(mpg ~., data=mtcars)
plot(mpg ~., data=mtcars)
library(lattice)
xyplot(mpg ~., data=mtcars)
xyplot(data=mtcars)
xyplot(mtcars)
xyplot(mtcars$mpg)
xyplot(mpg | weight, data=mtcars)
attach(mtcars)
xyplot(mpg ~ wt)
xyplot(mpg ~ wt, data=mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
round(dfbetas(fit)[1:10,2]3)
round(dfbetas(fit)[1:10,2],3)
round(dfbetas(fit)[1:10,2])
round(dfbetas(fit)[1:10,2])
fit <- lm(y ~ x)
round(dfbetas(fit)[1 : 10, 2], 3)
round(hatvalues(fit)[1 : 10], 3)
fit <- lm(y ~ x)
round(dfbetas(fit)[1 : 5, 2], 3)
round(hatvalues(fit)[1 : 5], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(hatvalues(fit)[1 : 5], 3)
plot(x,y)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
mean(mtcars$cyl[cyl==6])
mean(mtcars$cyl[mtcars$cyl==6])
mean(mtcars$wt[mtcars$cyl==6])
mean(mtcars$wt[mtcars$cyl==6])*2
fit<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
fit$confint
?summary.lm
library(kernlab)
library(kern)
install.packages(kernlab)
install.packages("kernlab")
data(spam)
library("kernlab")
data(spam)
head(spam)
View(spam)
plot(density(spam$your[spam$type=="nonspam"]),
col="blue",main="",xlab="Frequency of 'your'")
lines(density(spam$your[spam$type=="spam"]),col="red")
prediction <- ifelse(spam$your > 0.5,"spam","nonspam")
table(prediction,spam$type)/length(spam$type)
install.package("caret")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
head(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(head(adData))
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(inTrain$SuperPlasticizer)
View(head(inTrain))
data(concrete)
View(head(concrete))
attach(concrete)
set.seed(1000)
> inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
> training = mixtures[ inTrain,]
> testing = mixtures[-inTrain,]
set.seed(1000)inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
> training = mixtures[ inTrain,]
> testing = mixtures[-inTrain,]
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]training = mixtures[ inTrain,]
> testing = mixtures[-inTrain,]
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(inTrain)
View(head(inTrain))
View(head(mixtures))
hist(mixtures$Superplasticizer    )
hist(mixtures$Superplasticizer)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
View(head(training))
modelFit <- train(type ~.,data=training, method="glm")
library(caret)
modelFit <- train(type ~.,data=training, method="glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
modelFit <- train(type ~.,data=training, method="glm")
library(caret)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
options()
options(scipen=15)
confusionMatrix(predictions,testing$type)
hist(log(mixtures$Superplasticizer))
hist(mixtures$Superplasticizer)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
hist(trainCapAve)
hist(trainCapAveS)
median(trainCapAveS)
median(trainCapAve)
library(ISLR); library(caret); data(Wage);
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
install.packages("ISLR")
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
M <- abs(cor(training[,-58]))
plot(M)
M
diag(M) <- 0
diag(M)
> which(M > 0.8)
which(M > 0.8)
which(M > 0.8 ,arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
prComp$x[,1]
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
head(prComp)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(head(adData))
str(training)
training_IL<-training[grepl("IL", colnames(training))]
training_IL
training_IL<-training[grepl("^IL", colnames(training))]
View(head(trainin_IL))
View(head(training_IL))
preProc <- preProcess(spam[,training_IL]),method="pca")
preProc <- preProcess(training[,training_IL]),method="pca")
preProc <- preProcess(training[,training_IL], method="pca")
preProc <- preProcess(training[,training_IL], method="pca", pcaComp=12)
training[,training_IL]
preProc <- preProcess(training, method="pca")
preProc <- preProcess(training[grepl("^IL", colnames(training))], method="pca")
preProc
preProc$rotation
?preProcess
preProc$numComp
preProc <- preProcess(training[grepl("^IL", colnames(training))], method="pca", thresh=.8)
preProc
preProc <- preProcess(training, method="pca", thresh=.8)
View(head(training))
training2<-rbind(training$diagnosis, training[grepl("^IL", colnames(training))])
View(head(training2))
training2<-cbind(training$diagnosis, training[grepl("^IL", colnames(training))])
View(head(training2))
diagnosis<-training$diagnosis
training2<-cbind(diagnosis, training[grepl("^IL", colnames(training))])
View(head(training2))
preProc
trainPC <- predict(preProc, training2[,-1])
trainPC
names(trainPC)
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
summary(modelFit)
testPC <- predict(preProc,testing[,-1])
testing2<-cbind(diagnosis, testing[grepl("^IL", colnames(testing))])
diagnosis<-testing$diagnosis
testing2<-cbind(diagnosis, testing[grepl("^IL", colnames(testing))])
View(head(testing2))
testPC <- predict(preProc,testing[,-1])
testPC <- predict(preProc,testing2[,-1])
View(head(testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modelFitnoPC <- train(training$diagnosis ~ .,method="glm",data=training2)
modelFitnoPC
confusionMatrix(testing$diagnosis,predict(modelFitnoPC,testing2))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(head(training))
class(trainIndex)
View(head(trainIndex))
View(head(training))
View(head(testing))
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
confint(modelFit)
anova(Z)
anova(modelFit)
rm(list=ls)
rm(list=ls())
options(digits=4, scipen=999)
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:caret", unload=TRUE)
library("ElemStatLearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("pgmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(segmentationOriginal)
inTrain<-createDataPartition(segmentationOriginal$Class,p=0.6,list=FALSE)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
View(head(training))
model<-(training$Class~., data=training, method="rpart")
model<-train(training$Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("RGtk2")
library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
intall.packages("Gtk2")
intall.package("Gtk2")
install.packages("Gtk2")
install.packages("ggdendro")
library("ggdendro")
library(ggplot1)
library(ggplot2)
dendro_data(model)
plot(model)
plot(model$modelFinal)
data(segmentationOriginal)
set.seed(125) #sets the seed
## create training and testing set
inTrain<-createDataPartition(segmentationOriginal$Class,p=0.6,list=FALSE)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
model<-train(training$Class, data=training, method="rpart")
View(head(training))
model<-train(training$Class~., data=training, method="rpart")
dendro_data(model$modelFinal)
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
inTrain<-createDataPartition(segmentationOriginal$Case,p=0.6,list=FALSE)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
model<-train(training$Case~., data=training, method="rpart")
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dendro_data(model$finalModel)
test<-dendro_data(model$finalModel)
ggplot() +
geom_segment(data = fitr$segments,
aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = fitr$labels,
aes(x = x, y = y, label = label), size = 3, vjust = 0) +
geom_text(data = fitr$leaf_labels,
aes(x = x, y = y, label = label), size = 3, vjust = 1) +
theme_dendro()
geom_segment(data = fit$segments,
aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = fit$labels,
aes(x = x, y = y, label = label), size = 3, vjust = 0) +
geom_text(data = fit$leaf_labels,
aes(x = x, y = y, label = label), size = 3, vjust = 1) +
theme_dendro()
geom_segment(data = model$segments,
aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = model$labels,
aes(x = x, y = y, label = label), size = 3, vjust = 0) +
geom_text(data = model$leaf_labels,
aes(x = x, y = y, label = label), size = 3, vjust = 1) +
theme_dendro()
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
inTrain<-createDataPartition(segmentationOriginal$Case,p=0.6,list=FALSE)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
model<-train(training$Case~., data=training, method="rpart")
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
model<-train(training$Class~., data=training, method="rpart")
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
options(digits=4, scipen=999)
model<-train(training$Class~., data=training, method="rpart")
> plot(model$finalModel, uniform=TRUE, main="Classification Tree")
> text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
model<-train(training$Class~., data=training, method="rpart")
plot(model$finalModel, uniform=TRUE, main="Classification Tree")text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
model<-train(training$Class~., data=training, method="rpart")
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
training <- subset(segmentationOriginal, Case=='Train')
testing <- subset(segmentationOriginal, Case=='Test')
set.seed(125)
# model <- train(subset(training,select=-Class),training$Class,method = 'rpart')
model <- train(Class ~ .,data = training,method = 'rpart')
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
model <- train(subset(training,select=-Class),training$Class,method = 'rpart')
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
training <- subset(segmentationOriginal, Case=='Train')
testing <- subset(segmentationOriginal, Case=='Test')
set.seed(125)
model<-train(training$Class~., data=training, method="rpart")
plot(model)
rpart.plot(model$finalModel)
install.packages("rpart.plot")
data(segmentationOriginal)
rpart.plot(training)
library("rpart.plot")
rpart.plot(training)
rpart.plot(model$finalModel)
options(scipen=999)
rpart.plot(model$finalModel)
shiny::runApp('Data Products/project/hero_shiny_app')
